{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6cdd3f8f-9697-4b81-bd06-8a4fbdada141",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello!\n"
     ]
    }
   ],
   "source": [
    "expression = True\n",
    "if expression:\n",
    "    print('Hello!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7ee4a44e-977c-466e-968e-ce9ee9549510",
   "metadata": {},
   "outputs": [],
   "source": [
    "expression = False\n",
    "if expression:\n",
    "    print('Hello!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d04953da-c779-48a7-be26-1d4cb20b9468",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello!\n"
     ]
    }
   ],
   "source": [
    "expression = False\n",
    "if expression:\n",
    "    print(\"Hi!\")\n",
    "print('Hello!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6404497e-d38e-48b1-99f8-31b6d911bc79",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The expression is not True\n"
     ]
    }
   ],
   "source": [
    "expression = False\n",
    "if expression:\n",
    "    print('Hello!')\n",
    "else:\n",
    "    print( \"The expression is not True\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "93ba9702-9e6b-4ec5-ba91-7df0b5db2d0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello!\n"
     ]
    }
   ],
   "source": [
    "expression = True\n",
    "if expression:\n",
    "    print('Hello!')\n",
    "else:\n",
    "    print( \"The expression is not True\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c05f7c3a-1c8b-43a6-8f14-1f33914438df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Adulto\n"
     ]
    }
   ],
   "source": [
    "#Vejamos outro exemplo:\n",
    "\n",
    "idade = 23\n",
    "expression = (idade >= 18)\n",
    "if expression:\n",
    "    print(\"Adulto\")\n",
    "else:\n",
    "    print(\"Adolescente\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d2d7c2c8-5c83-46fb-8567-58f38f730e56",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Adolescente\n"
     ]
    }
   ],
   "source": [
    "idade = 16\n",
    "expression = (idade >= 18)\n",
    "if expression:\n",
    "    print(\"Adulto\")\n",
    "else:\n",
    "    print(\"Adolescente\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7c0e5cf7-3495-4d21-b8bf-48cf97a816a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Adolescente\n"
     ]
    }
   ],
   "source": [
    "####Para adicionar uma terceira condição:\n",
    "\n",
    "idade = 16\n",
    "\n",
    "expression1 = (idade < 18)\n",
    "expression2 = (idade < 60)\n",
    "\n",
    "if expression1: # aqui basta expression1 ser verdadeira\n",
    "    print(\"Adolescente\")\n",
    "elif expression2: # aqui expression1 deve ser falsa e expression2 verdadeira\n",
    "    print(\"Adulto\")\n",
    "else: # aqui expression1 e expression2 devem ser falsas\n",
    "    print(\"Idoso\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8a8f0700-cb66-429a-9cc0-08d8beb7d18a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Adulto\n"
     ]
    }
   ],
   "source": [
    "idade = 56\n",
    "\n",
    "expression1 = (idade < 18)\n",
    "expression2 = (idade < 60)\n",
    "\n",
    "if expression1: # aqui basta expression1 ser verdadeira\n",
    "    print(\"Adolescente\")\n",
    "elif expression2: # aqui expression1 deve ser falsa e expression2 verdadeira\n",
    "    print(\"Adulto\")\n",
    "else: # aqui expression1 e expression2 devem ser falsas\n",
    "    print(\"Idoso\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c0a6e841-c15b-4abe-889b-f0a27ee07170",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Idoso\n"
     ]
    }
   ],
   "source": [
    "idade = 65\n",
    "\n",
    "expression1 = (idade < 18)\n",
    "expression2 = (idade < 60)\n",
    "\n",
    "if expression1: # aqui basta expression1 ser verdadeira\n",
    "    print(\"Adolescente\")\n",
    "elif expression2: # aqui expression1 deve ser falsa e expression2 verdadeira\n",
    "    print(\"Adulto\")\n",
    "else: # aqui expression1 e expression2 devem ser falsas\n",
    "    print(\"Idoso\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "827d24a7-4537-418f-a9c1-b42c452cee4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Qual sua idade?  56\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Adulto\n"
     ]
    }
   ],
   "source": [
    "#Input, interagindo com o usuário\n",
    "#É possível pegar a variável idade do usuário que está executando o código. Para isso, usa-se a built-in function input.\n",
    "\n",
    "idade = input(\"Qual sua idade? \") # pega a idade como string\n",
    "idade = int(idade) # passa idade para inteiro\n",
    "\n",
    "if idade < 18: # aqui basta expression1 ser verdadeira\n",
    "    print(\"Adolescente\")\n",
    "elif idade < 60: # aqui expression1 deve ser falsa e expression2 verdadeira\n",
    "    print(\"Adulto\")\n",
    "else: # aqui expression1 e expression2 devem ser falsas\n",
    "    print(\"Idoso\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8247033e-4694-4d5c-b1b7-24d95e873f47",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Repetição (while)\n",
    "# Suponha que queremos imprimir números pares de 2 até 10. Podemos proceder como abaixo:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "375f8a9b-212e-42d3-afec-697142afd38b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "4\n",
      "6\n",
      "8\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "print(2)\n",
    "print(4)\n",
    "print(6)\n",
    "print(8)\n",
    "print(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "46fb5664-1d10-4c11-a9a8-c58830a87869",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "4\n",
      "6\n",
      "8\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "#Outra forma de fazer é usando while.\n",
    "\n",
    "number = 2 # número inicial a ser impresso\n",
    "while number < 11: # condição de parada (no caso de impressões)\n",
    "    print(number) # imprime number\n",
    "    number = number + 2 # atualiza number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ab4d3f5-2bc1-4090-8c96-679bbc724136",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Repetição (for)\n",
    "#Imprimiremos os números pares de 2 a 10, agora usando for:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "be5b00ad-de88-4a50-b1f6-af28ac45695e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "4\n",
      "6\n",
      "8\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "for number in [2,4,6,8,10]:\n",
    "    print(number)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4fcce6ee-eae3-46a1-ac96-971ecc991770",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "4\n",
      "6\n",
      "8\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "for number in range(2,11,2):\n",
    "    print(number)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "267d4508-7b6b-44f2-ab8c-dafede63c29a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P\n",
      "y\n",
      "t\n",
      "h\n",
      "o\n",
      "n\n"
     ]
    }
   ],
   "source": [
    "#O loop for iterage sobre qualquer tipo de iterável:\n",
    "\n",
    "for letter in \"Python\":\n",
    "    print(letter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6aa3ff86-6dba-47f5-b867-624682d4d899",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rune Age\n",
      "Runewars\n",
      "Runebound\n"
     ]
    }
   ],
   "source": [
    "boardgames = ['Rune Age', 'Runewars', 'Runebound']\n",
    "for bg in boardgames:\n",
    "    print(bg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "4969029e-ff66-457d-a78f-68d6f47ea3e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "720\n"
     ]
    }
   ],
   "source": [
    "#Podemos usar for para calcular o fatorial de um número n:\n",
    "\n",
    "n = 6\n",
    "result = 1\n",
    "\n",
    "for i in range(1,n+1):\n",
    "    result = result * i\n",
    "\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a6e647f3-3fd9-40e5-9659-0766c9946822",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Funções\n",
    "#Vejamos um exemplo de uma função que soma 10 ao número:\n",
    "\n",
    "def soma10(numero):\n",
    "    resultado = numero + 10\n",
    "    return resultado"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "d54a40cd-d7d5-4aa7-806b-5f71e3b9904b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "37"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "soma10(27)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "69d8462c-72bc-47d5-9d52-574010e349ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "#A variável numero é a entrada da função soma10. Uma função pode não ter uma entrada:\n",
    "\n",
    "def queAnoEstamos():\n",
    "    return 2019"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "9edcc1c6-44a7-4b25-95ee-e2666cbea38c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2019"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "queAnoEstamos()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "78793ef0-d889-470a-b845-c2ae840e370e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Um função pode ter entradas que não são obrigatórias:\n",
    "\n",
    "def adicionaNaListaDeCompras(item='banana'):\n",
    "    return item + \" adicionado\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "aff58b73-dc37-4794-82b2-6be93bb8087c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'banana adicionado'"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adicionaNaListaDeCompras()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "6590b3de-561b-465a-8792-ae351ccde3bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Uma função pode aceitar mais de uma entrada:\n",
    "\n",
    "def maximo(x, y):\n",
    "    if x > y:\n",
    "        return x\n",
    "    else:\n",
    "        return y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "cef1a98f-aa6f-4890-87e8-44f91034ce0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "27"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "maximo(15,27)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "f0d5790e-4e6f-4cff-9663-41a2257c2569",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Podemos criar funções com vários parâmetros obrigatórios e opcionais:\n",
    "\n",
    "def crazySum(a,b,c,d=1,e=2,f=3):\n",
    "    print( a + b + c + d + 2*e + 3*f )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "d923cd4f-9c02-440d-a3a5-253303cd0d72",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "crazySum() missing 1 required positional argument: 'c'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[56], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m crazySum(\u001b[38;5;241m5\u001b[39m,\u001b[38;5;241m9\u001b[39m)\n",
      "\u001b[1;31mTypeError\u001b[0m: crazySum() missing 1 required positional argument: 'c'"
     ]
    }
   ],
   "source": [
    "crazySum(5,9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "ada47361-00ee-417c-abe9-8df7707c8947",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "29\n"
     ]
    }
   ],
   "source": [
    "crazySum(5,9,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "7c0f5ee1-e4b8-4275-8ea7-70403d8c0fca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "39\n"
     ]
    }
   ],
   "source": [
    "crazySum(5,9,1,e=7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "2d4e728d-c8fb-487a-93f3-d3c3d4261aee",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Passando funções para lista\n",
    "#Relembrando da função soma10:\n",
    "def soma10(x):\n",
    "    return x + 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "72ab93c0-3de5-494f-a405-03d4334821ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[12, 15, 16, 27]\n"
     ]
    }
   ],
   "source": [
    "lista = [2,5,6,17]\n",
    "lista_mais_10 = list(map(soma10, lista))\n",
    "print(lista_mais_10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "66bfbf56-b0dd-4bb1-8d8b-7347773a10e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Lambda\n",
    "#Vamos relembrar da nossa função soma10.\n",
    "\n",
    "def soma10(x):\n",
    "    return x + 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "186ce1ca-c752-4dca-a334-8118b89f86a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function __main__.<lambda>(x)>"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Algumas vezes precisaremos usar a função apenas uma vez. Mais ainda, essa função pode ser bem simples, \n",
    "#como a soma10. Para esse caso, podemos usar lambda!\n",
    "\n",
    "lambda x: x + 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "628001e2-4a8a-4303-86fa-c98470bf5624",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "47"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(lambda x: x + 10)(37)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "2bf09241-f714-46ae-8d9b-29020cc78920",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[11, 12, 13, 14, 15]\n"
     ]
    }
   ],
   "source": [
    "lista = [1, 2, 3, 4, 5]\n",
    "lista_mais_10 = list(map(lambda x: x+10, lista))\n",
    "print(lista_mais_10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "105e2cd8-da7d-4ba1-b457-f7ff1701f84c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}


# exercício 4
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "ab122bba-fc5d-49fa-be07-9959edfaca4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Digite um número entre 1 e 10:  10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PAR\n"
     ]
    }
   ],
   "source": [
    "# Peça para o usuário digita um número inteiro de 1 a 10 (ambos inclusos).\n",
    "# Guarde esse número na variável number.\n",
    "# TODO\n",
    "\n",
    "# Imprima \"PAR\" se o número digitado for par e \"IMPAR\" caso contrário\n",
    "# Use if e else\n",
    "# Dica, use a operação % (resto da divisão)\n",
    "# TODO\n",
    "\n",
    "\n",
    "number = int(input(\"Digite um número entre 1 e 10: \"))\n",
    "if number < 1 or number > 10:\n",
    "    print(\"Número fora do intervalo permitido!\")\n",
    "else:\n",
    "    if number % 2 == 0:\n",
    "        print(\"PAR\")\n",
    "    else:\n",
    "        print(\"IMPAR\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "78422073-e035-49fb-8e87-efd264b6dcfc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Digite um número entre 1 e 20:  19\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAIOR\n"
     ]
    }
   ],
   "source": [
    "# Você vai fazer um programa para que o usuário tente adivinhar qual número você pensou\n",
    "# você pensou no número 15\n",
    "\n",
    "# Peça para o usuário digita um número inteiro de 1 a 20 (ambos inclusos).\n",
    "# Guarde esse número na variável number.\n",
    "# TODO\n",
    "\n",
    "# Imprima \"MENOR\" se o número digitado for menor que 15\n",
    "# Imprima \"MAIOR\" se o número for maior que 15\n",
    "# Imprima \"ACERTOU\" se o número for exatamente 15\n",
    "# Use if, elif e else\n",
    "# TODO\n",
    "\n",
    "\n",
    "number = int(input(\"Digite um número entre 1 e 20: \"))\n",
    "if number < 1 or number > 20:\n",
    "    print(\"Número fora do intervalo permitido!\")\n",
    "\n",
    "if number < 15:\n",
    "    print(\"MENOR\")\n",
    "elif number > 15:\n",
    "    print(\"MAIOR\")\n",
    "else:\n",
    "    print(\"ACERTOU\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "9f6a71d5-3282-4173-aeee-37704c2f3db1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Tente adivinhar o número (entre 1 e 20):  15\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ACERTOU\n"
     ]
    }
   ],
   "source": [
    "# Você vai fazer um programa para que o usuário tente adivinhar qual número você pensou\n",
    "# O programa deve parar apenas quando ele acertar\n",
    "# você pensou no número 15\n",
    "\n",
    "# Peça para o usuário digita um número inteiro de 1 a 20 (ambos inclusos).\n",
    "# Guarde esse número na variável number.\n",
    "## TODO\n",
    "\n",
    "# Imprima \"MENOR\" se o número digitado for menor que 15\n",
    "# Imprima \"MAIOR\" se o número for maior que 15\n",
    "# Imprima \"ACERTOU\" se o número for exatamente 15\n",
    "# Use while, if, elif e else\n",
    "# Dica: Não esqueça de pedir novamente um número ao usuário dentro da identação do while\n",
    "## TODO\n",
    "\n",
    "\n",
    "numero_secreto = 15\n",
    "number = int(input(\"Tente adivinhar o número (entre 1 e 20): \"))\n",
    "while number != numero_secreto:\n",
    "    if number < numero_secreto:\n",
    "        print(\"MENOR\")\n",
    "    elif number > numero_secreto:\n",
    "        print(\"MAIOR\")\n",
    "    number = int(input(\"Tente novamente: \"))\n",
    "print(\"ACERTOU\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "f2b618cd-8cc4-4aab-9925-9701152739d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Entre com um número inteiro: 15\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1307674368000\n"
     ]
    }
   ],
   "source": [
    "#Usando input podemos calcular o fatorial de um número digitado pelo usuário:\n",
    "\n",
    "n = int(input(\"Entre com um número inteiro:\"))\n",
    "result = 1\n",
    "for i in range(1,n+1):\n",
    "    result = result * i\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "e14b92ef-2727-42fc-a302-5b03475b1239",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Digite um número inteiro para calcular o fatorial:  15\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "O fatorial é 1307674368000\n"
     ]
    }
   ],
   "source": [
    "# faça um programa que imprime o fatorial do número inteiro digitado pelo usuário\n",
    "# use while!!!! não vale usar for!!!!\n",
    "# TODO\n",
    "\n",
    "\n",
    "numero = int(input(\"Digite um número inteiro para calcular o fatorial: \"))\n",
    "fatorial = 1\n",
    "contador = numero\n",
    "while contador > 1:\n",
    "    fatorial *= contador\n",
    "    contador -= 1\n",
    "print(f\"O fatorial é {fatorial}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "34551dca-a7e1-4683-be65-9904008bd2b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Digite um número inteiro:  15\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "O fatorial é 1307674368000\n"
     ]
    }
   ],
   "source": [
    "# Faça uma função que retorne o fatorial de um número inteiro\n",
    "# entrada: inteiro -> n\n",
    "# saida: inteiro -> fatorial de n\n",
    "# TODO\n",
    "def fatorial(n):\n",
    "    resultado = 1\n",
    "    for i in range(2, n + 1):\n",
    "        resultado *= i\n",
    "    return resultado\n",
    "numero = int(input(\"Digite um número inteiro: \"))\n",
    "print(f\"O fatorial é {fatorial(numero)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "46be79d9-0c81-4c9c-9873-da00cfa4d3f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Digite o primeiro número:  10\n",
      "Digite o segundo número:  20\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "O MDC é 10\n"
     ]
    }
   ],
   "source": [
    "# Faça uma função que retorne o mdc de dois números inteiros\n",
    "# entrada: inteiros -> m, n\n",
    "# saida: inteiro -> máximo divisor comum de m e n\n",
    "# TODO\n",
    "\n",
    "def mdc(m, n):\n",
    "    while n != 0:\n",
    "        m, n = n, m % n\n",
    "    return m\n",
    "a = int(input(\"Digite o primeiro número: \"))\n",
    "b = int(input(\"Digite o segundo número: \"))\n",
    "print(f\"O MDC é {mdc(a, b)}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "c414aa23-39fa-44e7-bc28-6d24da69b25a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['abacaxi\\n', 'cenoura\\n', 'pera\\n', 'uva\\n', 'batata\\n', 'cebola\\n', 'melancia\\n', 'couve\\n', 'alface\\n', 'acelga\\n']\n"
     ]
    }
   ],
   "source": [
    "# leia o arquivo lista_compras.txt\n",
    "f = open(\"lista_compras.txt\", \"r\")\n",
    "\n",
    "# coloque cada linha num elemento de uma lista chamada itens\n",
    "itens = f.readlines()\n",
    "\n",
    "# feche o arquivo\n",
    "f.close()\n",
    "print(itens)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "d5c3c9f2-db97-4674-89ab-556a6d9407aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# crie uma função de nome comecaA que verifica se uma palavra word começa com 'a'\n",
    "# entrada: string -> word\n",
    "# saida: boolean -> True: se word começa com 'a', False: se word não começa com a\n",
    "# TODO\n",
    "\n",
    "def comecaA(word):\n",
    "    return word.startswith('a') or word.startswith('A')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "7ac993d8-5986-49ee-b7ea-ce7a83497327",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "print(comecaA(\"amor\"))     \n",
    "print(comecaA(\"Amor\"))     \n",
    "print(comecaA(\"bola\"))     \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "1e8b1d54-6e20-4695-bb38-0614298442b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[True, False, False, False, False, False, False, False, True, True]\n"
     ]
    }
   ],
   "source": [
    "# Usando map, aplique a função comecaA na lista itens\n",
    "# guarde o resultado numa variável chamada resultado\n",
    "# TODO\n",
    "resultado = list(map(comecaA, itens))\n",
    "print(resultado)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "bac88889-1273-453e-8ef8-7a269b56b82b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'list'>\n",
      "[True, False, False, False, False, False, False, False, True, True]\n",
      "Número de itens começa com a letra 'a': 3\n"
     ]
    }
   ],
   "source": [
    "# qual o tipo da variável resultado?\n",
    "print(type(resultado))  # Deve mostrar: <class 'list'>\n",
    "\n",
    "# imprima a variável resultado\n",
    "print(resultado)\n",
    "\n",
    "# conte o número de True's na lista\n",
    "print(\"Número de itens começa com a letra 'a':\", resultado.count(True))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "e269f85a-dbd2-44d5-951d-ce902abf1be1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[25, 36, 10, 48, 59, -15, 26, -26, -15, -1235, -89, 59, 10, 0, 0, 10, -59, 10, 23, 56, -89, -47, 15, 10, 9, 8, 4, 3, -25, 10]\n"
     ]
    }
   ],
   "source": [
    "# leia o arquivo numeros.txt\n",
    "f = open(\"numeros.txt\", \"r\")\n",
    "\n",
    "numbers = [int(linha.strip()) for linha in f]\n",
    "f.close()\n",
    "print(numbers)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "935ab09e-3fd0-4fb5-b87a-be4b593cdfe9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Números maiores que 0: 19\n",
      "Números divisíveis por 3: 9\n"
     ]
    }
   ],
   "source": [
    "# quantos números na lista numbers são maiores que 0?\n",
    "maiores_que_zero = len([num for num in numbers if num > 0])\n",
    "print(\"Números maiores que 0:\", maiores_que_zero)\n",
    "\n",
    "# quantos números na lista numbers são divisíveis por 3?\n",
    "divisiveis_por_3 = len([num for num in numbers if num % 3 == 0])\n",
    "print(\"Números divisíveis por 3:\", divisiveis_por_3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b7ebf39-f705-40a9-90da-c0dc60cda631",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
