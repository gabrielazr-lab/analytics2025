{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "9888c58e-808c-45d3-b8d2-ba19bc17c639",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                 Vendas   R-squared:                       0.998\n",
      "Model:                            OLS   Adj. R-squared:                  0.994\n",
      "Method:                 Least Squares   F-statistic:                     231.5\n",
      "Date:                Thu, 22 May 2025   Prob (F-statistic):             0.0464\n",
      "Time:                        22:28:10   Log-Likelihood:                -19.467\n",
      "No. Observations:                   4   AIC:                             44.93\n",
      "Df Residuals:                       1   BIC:                             43.09\n",
      "Df Model:                           2                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "===============================================================================\n",
      "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------\n",
      "const         251.0241    124.786      2.012      0.294   -1334.532    1836.580\n",
      "Publicidade     5.0265      1.190      4.223      0.148     -10.097      20.150\n",
      "Preço          19.2169     21.822      0.881      0.540    -258.056     296.490\n",
      "==============================================================================\n",
      "Omnibus:                          nan   Durbin-Watson:                   2.380\n",
      "Prob(Omnibus):                    nan   Jarque-Bera (JB):                0.431\n",
      "Skew:                          -0.555   Prob(JB):                        0.806\n",
      "Kurtosis:                       1.837   Cond. No.                     1.10e+03\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.1e+03. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "R-squared: 0.9978450633915856\n"
     ]
    }
   ],
   "source": [
    "# TODO\n",
    "# Qual o valor de R² ao ajustar o modelo OLS para publicidade X preço?\n",
    "import statsmodels.api as sm\n",
    "import pandas as pd\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\", message=\"omni_normtest is not valid with less than 8 observations\")\n",
    "\n",
    "import statsmodels.api as sm\n",
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame({\n",
    "    'Publicidade': [100, 200, 300, 400],\n",
    "    'Preço': [10, 16, 18, 27],\n",
    "    'Vendas': [980, 1515, 2100, 2800]\n",
    "})\n",
    "\n",
    "X = df[['Publicidade', 'Preço']]\n",
    "y = df['Vendas']\n",
    "\n",
    "X = sm.add_constant(X)\n",
    "modelo = sm.OLS(y, X).fit()\n",
    "print(modelo.summary())\n",
    "print(f\"R-squared: {modelo.rsquared}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "b0fdcaba-051a-41ba-8d7b-efb443511391",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9978450633915856\n"
     ]
    }
   ],
   "source": [
    "# TODO\n",
    "# Qual o valor de R² ao ajustar o modelo OLS para publicidade X preço?\n",
    "import statsmodels.api as sm\n",
    "import pandas as pd\n",
    "\n",
    "# Dados de exemplo\n",
    "df = pd.DataFrame({\n",
    "    'Publicidade': [100, 200, 300, 400],\n",
    "    'Preço': [10, 16, 18, 27],\n",
    "    'Vendas': [980, 1515, 2100, 2800]\n",
    "})\n",
    "\n",
    "# Variáveis independentes\n",
    "X = df[['Publicidade', 'Preço']]\n",
    "y = df['Vendas']\n",
    "\n",
    "# Adiciona intercepto\n",
    "X = sm.add_constant(X)\n",
    "\n",
    "# Ajusta o modelo\n",
    "modelo = sm.OLS(y, X).fit()\n",
    "\n",
    "# Imprime o valor de R²\n",
    "print(modelo.rsquared)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "1099db92-f1a3-4e1c-84ed-1fa1e652151c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1º resultado: {'userId': 1, 'id': 1, 'title': 'delectus aut autem', 'completed': False}\n",
      "Tarefas completas: 90\n",
      "Tarefas incompletas: 110\n"
     ]
    }
   ],
   "source": [
    "# importando a biblioteca requests\n",
    "import requests\n",
    "# definindo a url\n",
    "url = \"https://jsonplaceholder.typicode.com/todos\"\n",
    "# fazendo uma requisição HTTP do tipo GET para a url\n",
    "response = requests.get(url)\n",
    "# colocando a lista de resultados em uma variável\n",
    "data = response.json()\n",
    "# printando o primeiro resultado da lista\n",
    "print(\"1º resultado:\", data[0])\n",
    "# temos uma lista de dicionários\n",
    "# estamos interessados na chave 'completed'\n",
    "completed = [todo for todo in data if todo['completed'] == True]\n",
    "uncompleted = [todo for todo in data if todo['completed'] == False]\n",
    "# mostrando o número de tarefas completas e incompletas\n",
    "print(\"Tarefas completas:\", len(completed))\n",
    "print(\"Tarefas incompletas:\", len(uncompleted))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "e54f3d50-824c-4228-8f38-a4ed2dc9d057",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "O usuário com Id 5 publicou 10 posts.\n"
     ]
    }
   ],
   "source": [
    "#Chegou a sua vez, vamos utilizar a API Fake jsonplaceholder ainda. \n",
    "import requests\n",
    "\n",
    "# URL dos posts\n",
    "url = \"https://jsonplaceholder.typicode.com/posts\"\n",
    "\n",
    "# Fazendo a requisição GET\n",
    "response = requests.get(url)\n",
    "\n",
    "# Convertendo para JSON (lista de dicionários)\n",
    "posts = response.json()\n",
    "\n",
    "# Filtrando os posts do usuário com userId 5\n",
    "posts_usuario_5 = [post for post in posts if post['userId'] == 5]\n",
    "\n",
    "# Contando quantos posts\n",
    "print(f\"O usuário com Id 5 publicou {len(posts_usuario_5)} posts.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "2ea9c31f-7ca3-4ac2-b71e-8ee0e822faba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Previsão de vendas para publicidade 250: 1848.75\n",
      "R² do modelo: 0.9962\n"
     ]
    }
   ],
   "source": [
    "#Scikit-learn é amplamente usada para machine learning em Python, oferecendo ferramentas para tarefas como classificação, regressão, \n",
    "#clusterização, pré-processamento de dados e avaliação de modelos. Ela é ideal para construir modelos preditivos e realizar análises \n",
    "#estatísticas. Por exemplo, podemos usar a Scikit-learn para fazer uma regressão linear simples que prevê vendas a partir do investimento \n",
    "#em publicidade. Para isso, criamos um modelo de regressão linear, ajustamos ele aos dados de publicidade e vendas, e depois podemos fazer \n",
    "#previsões, como estimar as vendas para um investimento de publicidade específico. Além disso, a biblioteca também calcula o coeficiente de \n",
    "#determinação R², que indica a qualidade do ajuste do modelo. Se quiser, posso mostrar exemplos mais \n",
    "#avançados ou sugerir outras bibliotecas úteis.\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import numpy as np\n",
    "\n",
    "# Dados (Publicidade e Vendas)\n",
    "X = np.array([100, 200, 300, 400]).reshape(-1, 1)  # variável independente\n",
    "y = np.array([980, 1515, 2100, 2800])              # variável dependente\n",
    "\n",
    "# Criando o modelo de regressão linear\n",
    "modelo = LinearRegression()\n",
    "\n",
    "# Ajustando o modelo aos dados\n",
    "modelo.fit(X, y)\n",
    "\n",
    "# Prevendo as vendas para um investimento em publicidade de 250\n",
    "previsao = modelo.predict([[250]])\n",
    "\n",
    "print(f\"Previsão de vendas para publicidade 250: {previsao[0]:.2f}\")\n",
    "\n",
    "# Coeficiente R² do modelo\n",
    "r2 = modelo.score(X, y)\n",
    "print(f\"R² do modelo: {r2:.4f}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
