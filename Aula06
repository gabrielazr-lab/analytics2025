# TODO
# Qual o valor de R² ao ajustar o modelo OLS para publicidade X preço?
import statsmodels.api as sm
import pandas as pd

import warnings
warnings.filterwarnings("ignore", message="omni_normtest is not valid with less than 8 observations")

import statsmodels.api as sm
import pandas as pd

df = pd.DataFrame({
    'Publicidade': [100, 200, 300, 400],
    'Preço': [10, 16, 18, 27],
    'Vendas': [980, 1515, 2100, 2800]
})

X = df[['Publicidade', 'Preço']]
y = df['Vendas']

X = sm.add_constant(X)
modelo = sm.OLS(y, X).fit()
print(modelo.summary())
print(f"R-squared: {modelo.rsquared}")

# TODO
# Qual o valor de R² ao ajustar o modelo OLS para publicidade X preço?
import statsmodels.api as sm
import pandas as pd

# Dados de exemplo
df = pd.DataFrame({
    'Publicidade': [100, 200, 300, 400],
    'Preço': [10, 16, 18, 27],
    'Vendas': [980, 1515, 2100, 2800]
})

# Variáveis independentes
X = df[['Publicidade', 'Preço']]
y = df['Vendas']

# Adiciona intercepto
X = sm.add_constant(X)

# Ajusta o modelo
modelo = sm.OLS(y, X).fit()

# Imprime o valor de R²
print(modelo.rsquared)

# importando a biblioteca requests
import requests
# definindo a url
url = "https://jsonplaceholder.typicode.com/todos"
# fazendo uma requisição HTTP do tipo GET para a url
response = requests.get(url)
# colocando a lista de resultados em uma variável
data = response.json()
# printando o primeiro resultado da lista
print("1º resultado:", data[0])
# temos uma lista de dicionários
# estamos interessados na chave 'completed'
completed = [todo for todo in data if todo['completed'] == True]
uncompleted = [todo for todo in data if todo['completed'] == False]
# mostrando o número de tarefas completas e incompletas
print("Tarefas completas:", len(completed))
print("Tarefas incompletas:", len(uncompleted))

#Scikit-learn é amplamente usada para machine learning em Python, oferecendo ferramentas para tarefas como classificação, regressão, 
#clusterização, pré-processamento de dados e avaliação de modelos. Ela é ideal para construir modelos preditivos e realizar análises 
#estatísticas. Por exemplo, podemos usar a Scikit-learn para fazer uma regressão linear simples que prevê vendas a partir do investimento 
#em publicidade. Para isso, criamos um modelo de regressão linear, ajustamos ele aos dados de publicidade e vendas, e depois podemos fazer 
#previsões, como estimar as vendas para um investimento de publicidade específico. Além disso, a biblioteca também calcula o coeficiente de 
#determinação R², que indica a qualidade do ajuste do modelo. Se quiser, posso mostrar exemplos mais 
#avançados ou sugerir outras bibliotecas úteis.

from sklearn.linear_model import LinearRegression
import numpy as np

# Dados (Publicidade e Vendas)
X = np.array([100, 200, 300, 400]).reshape(-1, 1)  # variável independente
y = np.array([980, 1515, 2100, 2800])              # variável dependente

# Criando o modelo de regressão linear
modelo = LinearRegression()

# Ajustando o modelo aos dados
modelo.fit(X, y)

# Prevendo as vendas para um investimento em publicidade de 250
previsao = modelo.predict([[250]])

print(f"Previsão de vendas para publicidade 250: {previsao[0]:.2f}")

# Coeficiente R² do modelo
r2 = modelo.score(X, y)
print(f"R² do modelo: {r2:.4f}")
